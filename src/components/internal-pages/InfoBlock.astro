---
import Button from "@components/buttons/Button.astro";
import ButtonDownload from "@components/buttons/ButtonDownload.astro";
import Swiper from "@components/internal-pages/Swiper.astro";

const {
  sectionId,
  textTitle,
  textContent,
  contrast,
  images,
  links,
  downloadButton,
} = Astro.props;

// Split the title into words if it exists
const titleWords = textTitle ? textTitle.split(" ") : [];
---

<script>
  if (typeof window !== "undefined") {
    window.addEventListener("DOMContentLoaded", () => {
      const infoBlocks = document.querySelectorAll(".info-block");

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              // Add a delay before starting the animation
              setTimeout(() => {
                entry.target.classList.add("animate");
              }, 200);
              observer.unobserve(entry.target);
            }
          });
        },
        {
          threshold: 0.1, 
        },
      );

      infoBlocks.forEach((block) => observer.observe(block));
    });
  }
</script>

<section
  id={sectionId ? sectionId : ""}
  class=`info-block ${contrast ? "global-colors" : ""}`
>
  <div class="info-container global-max-width">
    {
      textTitle && (
        <h2 class={`${contrast ? "global-clr-accent" : ""} text-title`}>
          {titleWords.map((word: string, index: number) => (
            <span class="animated text" style={`--delay: ${index * 100}ms`}>
              {word}
            </span>
          ))}
        </h2>
      )
    }

    <div class="text-container">
      {
        textContent.map((paragraph: string) => (
          <p style={`color: ${contrast ? "var(--clr-secondary)" : "#000000"}`}>
            {Array.isArray(paragraph)
              ? paragraph.map((textline, index) => (
                  <>
                    {textline}
                    {index < paragraph.length - 1 && <br />}
                  </>
                ))
              : paragraph}
          </p>
        ))
      }
      {
        links && (
          <div class="links-container">
            {links.map((link: { text: string; slug: string; ariaLabel: string; newTab: boolean }) => (
              <Button text={link.text} slug={link.slug} label={link.ariaLabel} newTab={link.newTab} />
            ))}
          </div>
        )
      }

      {
        downloadButton && (
          <div class="links-container">
            <ButtonDownload
              text={downloadButton.text}
              slug={downloadButton.slug}
              newTab
            />
          </div>
        )
      }
    </div>
  </div>
  {images && <Swiper imagesArr={images} />}
</section>

<style>
  .info-block {
    background-color: var(--clr-secondary);
  }

  .info-container {
    max-width: var(--wd-max);
    padding-inline: var(--space-x-xl);
    padding-block: var(--space-y-page-section);
    display: flex;
    gap: clamp(1rem, -12.499rem + 22.735vi, 6.5rem);
    font-size: var(--fnt-sz-internal-page);
    letter-spacing: 0.0004rem;
  }

  .text-title {
    color: var(--clr-primary);
    min-width: 11ch;
    max-width: 11ch;
    letter-spacing: -0.03em;
    font-weight: var(--fnt-wg-regular);
    line-height: 1.1;
  }

  .text-title span {
    margin-right: 0.25rem;
  }

  .text {
    opacity: 0;
    transform: translateY(50%);
    display: inline-block;
    padding-right: 0.4rem;

  }

  .text:last-child {
    padding-right: 0;
  }
  .info-block.animate .text.animated {
    animation: animate-lines 0.2s var(--delay, 0ms)
      cubic-bezier(0, 0, 0.58, 1.2) forwards;
  }

  @keyframes animate-lines {
    0% {
      opacity: 0;
      transform: translateY(50%);
    }
    1% {
      opacity: 1;
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .text-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .links-container {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    padding-top: 1.5rem;
  }

  @media (width < 1091px) {
    .info-container {
      flex-direction: column;
    }
    .text-title {
      width: 100%;
      max-width: 100%;
    }

    .text {
    padding-right: 0.1rem;

  }

  .text:last-child {
    padding-right: 0;
  }
  }
</style>
