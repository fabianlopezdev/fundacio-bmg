---
import { Image } from "astro:assets";
import { JSDOM } from "jsdom";
import fs from "fs";
import handballBall from "@assets/handball-ball.svg";

// Suppose you have a predefined list of countries that need a different fill color

import {
  allCountriesThatPlayed,
  countriesInContinents,
} from "@data/countriesData";

// Read the original SVG from a file
const svgPath = "./src/assets/world.svg";
const svgContent = fs.readFileSync(svgPath, "utf-8");

// Parse SVG using JSDOM
const dom = new JSDOM(svgContent);
const doc = dom.window.document;

// Loop through each highlighted country and set its fill attribute
allCountriesThatPlayed.forEach((countryTitle) => {
  const country = doc.querySelector(`path[title="${countryTitle}"]`);
  if (!country) return;

  country.classList.add("highlighted");

  Object.entries(countriesInContinents).forEach(([continent, countries]) => {
    if (countries.has(countryTitle)) {
      country.classList.add(continent);
    }
  });
});

const formatContinentName = (continent: string): string => {
  const nameMap: { [key: string]: string } = {
    europe: "Europa",
    asia: "Àsia",
    africa: "Àfrica",
    "north-america": "Amèrica del Nord",
    "south-america": "Amèrica del Sud",
    oceania: "Oceania",
  };
  return nameMap[continent] || continent;
};

// Generate continent info elements
const continentInfoElements = Object.entries(countriesInContinents).map(
  ([continent, countries]) => ({
    id: continent,
    name: formatContinentName(continent),
    countriesCount: countries.size,
    countriesList: Array.from(countries).join(", "),
  }),
);

const finalSVG = doc.documentElement.outerHTML;
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mapContainer = document.querySelector(".map-container");
    const continentInfos = document.querySelectorAll(".continent-info");

    // Add variables to track cursor position
    let currentX = 0;
    let currentY = 0;
    let targetX = 0;
    let targetY = 0;

    // Animation function using requestAnimationFrame
    function animatePosition() {
      const activeInfo = document.querySelector(
        ".continent-info.active",
      ) as HTMLElement;

      if (activeInfo) {
        // Interpolate between current and target positions
        currentX += (targetX - currentX) * 0.15;
        currentY += (targetY - currentY) * 0.15;

        // Apply position
        activeInfo.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;
      }

      requestAnimationFrame(animatePosition);
    }

    // Start animation loop
    animatePosition();

    document.addEventListener("mousemove", (e) => {
      const activeInfo = document.querySelector(
        ".continent-info.active",
      ) as HTMLElement;
      if (activeInfo) {
        const cursorDistance = 15;
        let left = e.clientX + cursorDistance;
        let top = e.clientY + cursorDistance;

        if (left + 408 > window.innerWidth) {
          left = e.clientX - 428;
        }

        if (top + activeInfo.offsetHeight > window.innerHeight) {
          top = e.clientY - activeInfo.offsetHeight - cursorDistance;
        }

        // Update target positions instead of directly setting style
        targetX = left;
        targetY = top;
      }
    });

    const isTouchableDevice =
      "ontouchstart" in window || navigator.maxTouchPoints > 0;

    if (mapContainer && !isTouchableDevice) {
      const continents = [
        "europe",
        "asia",
        "africa",
        "north-america",
        "south-america",
        "oceania",
      ];

      continents.forEach((continent) => {
        const paths = mapContainer.querySelectorAll(`path.${continent}`);
        const continentInfo = document.querySelector(
          `.continent-info[data-continent="${continent}"]`,
        ) as HTMLElement;

        paths.forEach((path) => {
          path.addEventListener("mouseenter", () => {
            // Hide all continent infos
            continentInfos.forEach((info) => {
              (info as HTMLElement).style.opacity = "0";
              info.classList.remove("active");
            });

            // Show current continent info
            if (continentInfo) {
              continentInfo.style.opacity = "1";
              continentInfo.style.pointerEvents = "none";
              continentInfo.classList.add("active");

              // Reset current position to prevent jumping
              const rect = path.getBoundingClientRect();
              currentX = rect.left;
              currentY = rect.top;
              targetX = currentX;
              targetY = currentY;
            }
          });

          path.addEventListener("mouseleave", () => {
            if (continentInfo) {
              continentInfo.style.opacity = "0";
              continentInfo.classList.remove("active");
            }
          });
        });
      });
    }
  });
</script>
<div class="relative">
  <div class="map-container" set:html={finalSVG} />

  {
    continentInfoElements.map(({ id, name, countriesCount, countriesList }) => (
      <article class="continent-info" data-continent={id}>
        <header>
          <h3>
            <span class="continent-name">{name}</span>
            <span class="countries-number">
              ({countriesCount} {countriesCount === 1 ? "país" : "països"})
            </span>
          </h3>
          <Image src={handballBall} alt="" />
        </header>
        <p>{countriesList}</p>
      </article>
    ))
  }
</div>

<style>
  div.map-container {
    width: 100vw;
    max-width: 1513px;
    padding-inline: var(--space-x-m);
    margin-inline: auto;
    position: relative;
    overflow: visible;
  }

  .relative {
    position: relative;
    width: 100%;
    height: 100%;
  }
  .continent-info {
    position: fixed;
    width: 408px;
    color: var(--clr-primary);
    border: 1px solid var(--clr-primary);
    border-radius: 0.8rem;
    font-weight: var(--fnt-wg-regular);
    background-color: white;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s ease-out;
    pointer-events: none;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    /* Remove left/top positioning and use transform instead */
    left: 0;
    top: 0;
    transform: translate3d(0, 0, 0);
    /* Use hardware acceleration */
    will-change: transform;
  }

  h3 {
    font-weight: var(--fnt-wg-regular);
  }

  header {
    background-color: var(--clr-accent);
    padding-inline: 1.5rem;
    padding-block: 1rem;
    border-top-left-radius: 0.8rem;
    border-top-right-radius: 0.8rem;
    border-bottom: 1px solid var(--clr-primary);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .country-name {
    font-size: 30px;
  }

  .countries-number {
    font-size: var(--fnt-sz-sm);
  }

  p {
    padding: 1.5rem;
  }

  .world-map path {
    fill: rgba(197, 220, 255, 1);
    stroke: black;
    stroke-width: 0.5;
  }

  .world-map path.highlighted {
    fill: var(--clr-primary);
    stroke: white;
    stroke-width: 1;
    cursor: zoom-in;
    transition: fill 0.2s ease-in-out;
  }

  @media (hover: hover) {
    :global(.map-container:has(path.north-america:hover) path.north-america) {
      fill: var(--clr-accent);
      stroke: white;
    }

    :global(.map-container:has(path.south-america:hover) path.south-america) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.europe:hover) path.europe) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.asia:hover) path.asia) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.africa:hover) path.africa) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.oceania:hover) path.oceania) {
      fill: var(--clr-accent);
      stroke: black;
    }

    /* Optional: Add active state for touch devices */
    :global(.map-container:has(path.north-america:active) path.north-america) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.south-america:active) path.south-america) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.europe:active) path.europe) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.asia:active) path.asia) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.africa:active) path.africa) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.oceania:active) path.oceania) {
      fill: var(--clr-accent);
      stroke: black;
    }
  }
</style>
