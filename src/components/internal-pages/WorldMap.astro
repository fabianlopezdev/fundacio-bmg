---
import { Image } from "astro:assets";
import { JSDOM } from "jsdom";
import fs from "fs";
import handballBall from "@assets/handball-ball.svg";

import {
  allCountriesThatPlayed,
  countriesInContinents,
  allCountriesByContinent,
} from "@data/countriesData";

// Read the original SVG from a file
const svgPath = "./src/assets/world.svg";
const svgContent = fs.readFileSync(svgPath, "utf-8");

// Parse SVG using JSDOM
const dom = new JSDOM(svgContent);
const doc = dom.window.document;

// Create a <g> for each continent and insert it into the SVG
const rootSvg = doc.querySelector("svg");
const defs = rootSvg.querySelector("defs");
const continentGroups = {};

Object.keys(allCountriesByContinent).forEach((continent) => {
  const g = doc.createElementNS("http://www.w3.org/2000/svg", "g");
  g.classList.add(continent);

  // Insert the group after <defs>, if present
  if (defs && defs.nextSibling) {
    rootSvg.insertBefore(g, defs.nextSibling);
  } else {
    rootSvg.appendChild(g);
  }

  continentGroups[continent] = g;
});

// Move each country's <path> into its corresponding continent <g>
Object.entries(allCountriesByContinent).forEach(([continent, countrySet]) => {
  countrySet.forEach((countryName) => {
    const countryPath = doc.querySelector(`path[title="${countryName}"]`);
    if (countryPath) {
      continentGroups[continent].appendChild(countryPath);
    }
  });
});

// Assign a continent class to all countries of that continent
Object.entries(allCountriesByContinent).forEach(([continent, countrySet]) => {
  countrySet.forEach((countryName) => {
    const countryElement = continentGroups[continent].querySelector(
      `path[title="${countryName}"]`
    );
    if (countryElement) {
      countryElement.classList.add(continent);
    }
  });
});

// Highlight countries that played
allCountriesThatPlayed.forEach((countryTitle) => {
  const country = doc.querySelector(`path[title="${countryTitle}"]`);
  if (country) {
    country.classList.add("highlighted");
  }
});

// Generate continent info elements
const formatContinentName = (continent: string): string => {
  const nameMap: { [key: string]: string } = {
    europe: "Europa",
    asia: "Àsia",
    africa: "Àfrica",
    "north-america": "Amèrica del Nord",
    "south-america": "Amèrica del Sud",
    oceania: "Oceania",
  };
  return nameMap[continent] || continent;
};

const continentInfoElements = Object.entries(countriesInContinents).map(
  ([continent, countries]) => ({
    id: continent,
    name: formatContinentName(continent),
    countriesCount: countries.size,
    countriesList: Array.from(countries).join(", "),
  }),
);

const finalSVG = doc.documentElement.outerHTML;

export { finalSVG, continentInfoElements };

---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mapContainer = document.querySelector(".map-container");
    const continentInfos = document.querySelectorAll(".continent-info");

    // Variables for smooth position animation
    let currentX = 0;
    let currentY = 0;
    let targetX = 0;
    let targetY = 0;

    function animatePosition() {
      const activeInfo = document.querySelector(".continent-info.active");
      if (activeInfo) {
        currentX += (targetX - currentX) * 0.15;
        currentY += (targetY - currentY) * 0.15;
        activeInfo.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;
      }
      requestAnimationFrame(animatePosition);
    }

    animatePosition();

    document.addEventListener("mousemove", (e) => {
      const activeInfo = document.querySelector(".continent-info.active");
      if (activeInfo) {
        const cursorDistance = 15;
        let left = e.clientX + cursorDistance;
        let top = e.clientY + cursorDistance;

        if (left + 408 > window.innerWidth) {
          left = e.clientX - 428;
        }

        if (top + activeInfo.offsetHeight > window.innerHeight) {
          top = e.clientY - activeInfo.offsetHeight - cursorDistance;
        }

        targetX = left;
        targetY = top;
      }
    });

    const isTouchableDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0;

    if (mapContainer && !isTouchableDevice) {
      const continents = [
        "europe",
        "asia",
        "africa",
        "north-america",
        "south-america",
        "oceania",
      ];

      continents.forEach((continent) => {
        const group = mapContainer.querySelector(`g.${continent}`);
        const continentInfo = document.querySelector(
          `.continent-info[data-continent="${continent}"]`
        );

        if (group && continentInfo) {
          group.addEventListener("mouseenter", () => {
            continentInfos.forEach((info) => {
              info.style.opacity = "0";
              info.classList.remove("active");
            });

            continentInfo.style.opacity = "1";
            continentInfo.style.pointerEvents = "none";
            continentInfo.classList.add("active");

            const rect = group.getBoundingClientRect();
            currentX = rect.left;
            currentY = rect.top;
            targetX = currentX;
            targetY = currentY;
          });

          group.addEventListener("mouseleave", () => {
            continentInfo.style.opacity = "0";
            continentInfo.classList.remove("active");
          });
        }
      });
    }
  });
</script>

<div class="relative">
  <div class="map-container" set:html={finalSVG} />

  {
    continentInfoElements.map(({ id, name, countriesCount, countriesList }) => (
      <article class="continent-info" data-continent={id}>
        <header>
          <h3>
            <span class="continent-name">{name}</span>
            <span class="countries-number">
              ({countriesCount} {countriesCount === 1 ? "país" : "països"})
            </span>
          </h3>
          <Image src={handballBall} alt="" />
        </header>
        <p>{countriesList}</p>
      </article>
    ))
  }
</div>

<style>
  div.map-container {
    width: 100vw;
    max-width: 1513px;
    padding-inline: var(--space-x-m);
    margin-inline: auto;
    position: relative;
    overflow: visible;
  }

  .relative {
    position: relative;
    width: 100%;
    height: 100%;
  }
  .continent-info {
    position: fixed;
    width: 408px;
    color: var(--clr-primary);
    border: 1px solid var(--clr-primary);
    border-radius: 0.8rem;
    font-weight: var(--fnt-wg-regular);
    background-color: white;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s ease-out;
    pointer-events: none;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    left: 0;
    top: 0;
    transform: translate3d(0, 0, 0);
    will-change: transform;
  }

  h3 {
    font-weight: var(--fnt-wg-regular);
  }

  header {
    background-color: var(--clr-accent);
    padding-inline: 1.5rem;
    padding-block: 1rem;
    border-top-left-radius: 0.8rem;
    border-top-right-radius: 0.8rem;
    border-bottom: 1px solid var(--clr-primary);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .countries-number {
    font-size: var(--fnt-sz-sm);
  }

  p {
    padding: 1.5rem;
  }

  :global(.world-map path) {
    fill: rgba(197, 220, 255, 1);
    stroke: white;
    stroke-width: 0.5;
  }

  @media (hover: hover) {
    :global(.map-container:has(g.europe:hover) path.europe.highlighted),
    :global(.map-container:has(g.asia:hover) path.asia.highlighted),
    :global(.map-container:has(g.africa:hover) path.africa.highlighted),
    :global(.map-container:has(g.north-america:hover) path.north-america.highlighted),
    :global(.map-container:has(g.south-america:hover) path.south-america.highlighted),
    :global(.map-container:has(g.oceania:hover) path.oceania.highlighted) {
      fill: var(--clr-primary);
    }
  }
</style>
