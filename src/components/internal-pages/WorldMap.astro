---
import { Image } from "astro:assets";
import { JSDOM } from "jsdom";
import fs from "fs";
import handballBall from "@assets/handball-ball.svg";

// Suppose you have a predefined list of countries that need a different fill color
const highlightedCountries = [
  "Argentina", "Australia", "Austria", "Belgium", "Bosnia", "Brazil", "Bulgaria",
  "Canada", "Chile", "China", "Colombia", "Croatia", "Czechia", "Denmark",
  "Egypt", "England", "Estonia", "Faroe Islands", "Finland", "France", "Georgia",
  "Germany", "Greece", "Guatemala", "Hungary", "Iceland", "India", "Israel",
  "Italy", "Kenya", "Latvia", "Lithuania", "Macedonia", "Mexico", "Moldova",
  "Morocco", "Nigeria", "Norway", "Poland", "Portugal", "Romania", "Russia",
  "Scotland", "Serbia", "Slovenia", "South Korea", "Spain", "Sweden",
  "Switzerland", "Taiwan", "Tunisia", "United States", "Uruguay", "Venezuela",
];

const africa = ["Egypt", "Kenya", "Morocco", "Nigeria", "Tunisia"];
const asia = ["China", "India", "Israel", "South Korea", "Taiwan"];
const europe = [
  "Austria", "Belgium", "Bosnia", "Bulgaria", "Croatia", "Czechia", "Denmark",
  "England", "Estonia", "Faroe Islands", "Finland", "France", "Georgia",
  "Germany", "Greece", "Hungary", "Iceland", "Italy", "Latvia", "Lithuania",
  "Macedonia", "Moldova", "Norway", "Poland", "Portugal", "Romania", "Russia",
  "Scotland", "Serbia", "Slovenia", "Spain", "Sweden", "Switzerland",
];
const northAmerica = ["Canada", "Guatemala", "Mexico", "United States"];
const southAmerica = ["Argentina", "Brazil", "Chile", "Colombia", "Uruguay", "Venezuela"];
const oceania = ["Australia"];

const continentMap = {
  africa: new Set(africa),
  asia: new Set(asia),
  europe: new Set(europe),
  "north-america": new Set(northAmerica),
  "south-america": new Set(southAmerica),
  oceania: new Set(oceania),
};

const highlightColor = "rgba(197, 220, 255, 1)";

// Read the original SVG from a file
const svgPath = "./src/assets/world.svg";
const svgContent = fs.readFileSync(svgPath, "utf-8");

// Parse SVG using JSDOM
const dom = new JSDOM(svgContent);
const doc = dom.window.document;

// Loop through each highlighted country and set its fill attribute
highlightedCountries.forEach((countryTitle) => {
  const countryPath = doc.querySelector(`path[title="${countryTitle}"]`);
  if (!countryPath) return;

  // Add base highlight class
  countryPath.classList.add("highlighted");

  // Find which continent the country belongs to and add appropriate class
  Object.entries(continentMap).forEach(([continent, countries]) => {
    if (countries.has(countryTitle)) {
      countryPath.classList.add(continent);
    }
  });
});

// Convert back to string
const finalSVG = doc.documentElement.outerHTML;
---
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mapContainer = document.querySelector(".map-container");
    const continentInfo = document.querySelector(".continent-info") as HTMLElement;
    
    // Add mousemove event listener to track cursor
    document.addEventListener("mousemove", (e) => {
      if (continentInfo.style.opacity === "1") {
        const padding = 20; // Distance from cursor
        let left = e.clientX + padding;
        let top = e.clientY + padding;
        
        // Check if tooltip would go off-screen to the right
        if (left + 408 > window.innerWidth) {
          left = e.clientX - 428; // Position to the left of the cursor
        }
        
        // Check if tooltip would go off-screen at the bottom
        if (top + continentInfo.offsetHeight > window.innerHeight) {
          top = e.clientY - continentInfo.offsetHeight - padding;
        }
        
        continentInfo.style.left = `${left}px`;
        continentInfo.style.top = `${top}px`;
      }
    });

    const isTouchableDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0;

    if (mapContainer) {
      if (isTouchableDevice) {
        // Your existing touch device handling remains the same...
      } else {
        // Modified mouse device handling
        const continents = ["europe", "asia", "africa", "north-america", "south-america", "oceania"];
        
        continents.forEach(continent => {
          const paths = mapContainer.querySelectorAll(`path.${continent}`);
          
          paths.forEach(path => {
            path.addEventListener("mouseenter", () => {
              continentInfo.style.opacity = "1";
              continentInfo.style.pointerEvents = "none";
            });
            
            path.addEventListener("mouseleave", () => {
              continentInfo.style.opacity = "0";
            });
          });
        });
      }
    }
  });
</script>
<div class="relative">
  <div class="map-container" set:html={finalSVG} />
  
  <article class="continent-info">
    <header>
      <h3>
        <span class="country-name">Europa</span>
        <span class="countries-number">(34 països)</span>
      </h3>
      <Image src={handballBall} alt="" />
    </header>
    <p>
      Alemanya, Andorra, Àustria, Bèlgica, Bòsnia, Bulgària, Croàcia, Dinamarca,
      Escòcia, Eslovènia, Espanya, Estònia, Finlàndia, França, Geòrgia, Grècia,
      Gran Bretanya, Hongria, Illes Feroe, Islàndia, Itàlia, Letònia, Lituània,
      Macedònia, Moldàvia, Noruega, Polònia, Portugal, Romania, Rússia, Sèrbia,
      Suècia, Suïssa, Txèquia,
    </p>
  </article>
</div>

<style>
  div.map-container {
    width: 100vw;
  max-width: 1513px;
  padding-inline: var(--space-x-m);
  margin-inline: auto;
  position: relative;
  overflow: visible; 
  }

  .relative {
  position: relative;
  width: 100%;
  height: 100%;
}
  .continent-info {
    position: fixed; /* Changed from absolute to fixed for smoother following */
    width: 408px;
    color: var(--clr-primary);
    border: 1px solid var(--clr-primary);
    border-radius: 0.8rem;
    font-weight: var(--fnt-wg-regular);
    background-color: white;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    pointer-events: none;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  h3 {
    font-weight: var(--fnt-wg-regular);
  }

  header {
    background-color: var(--clr-accent);
    padding-inline: 1.5rem;
    padding-block: 1rem;
    border-top-left-radius: 0.8rem;
    border-top-right-radius: 0.8rem;
    border-bottom: 1px solid var(--clr-primary);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .country-name {
    font-size: 30px;
  }

  .countries-number {
    font-size: var(--fnt-sz-sm);
  }

  p {
    padding: 1.5rem;
  }

  .world-map path {
    fill: rgba(197, 220, 255, 1);
    stroke: black;
    stroke-width: 0.5;
  }

  .world-map path.highlighted {
    fill: var(--clr-primary);
    stroke: white;
    stroke-width: 1;
    cursor: zoom-in;
    transition: fill 0.2s ease-in-out;
  }

  @media (hover: hover) {
    :global(.map-container:has(path.north-america:hover) path.north-america) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.south-america:hover) path.south-america) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.europe:hover) path.europe) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.asia:hover) path.asia) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.africa:hover) path.africa) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.oceania:hover) path.oceania) {
      fill: var(--clr-accent);
      stroke: black;
    }

    /* Optional: Add active state for touch devices */
    :global(.map-container:has(path.north-america:active) path.north-america) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.south-america:active) path.south-america) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.europe:active) path.europe) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.asia:active) path.asia) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.africa:active) path.africa) {
      fill: var(--clr-accent);
      stroke: black;
    }

    :global(.map-container:has(path.oceania:active) path.oceania) {
      fill: var(--clr-accent);
      stroke: black;
    }
  }
</style>