---
import { Image } from "astro:assets";
import { JSDOM } from "jsdom";
import fs from "fs";
import handballBall from "@assets/handball-ball.svg";
import WorldSVG from "@assets/world.svg";
import {
 continentInfoElements,
} from "@data/countriesData";

import path from "path";

const rawSVG = fs.readFileSync(path.resolve("./src/assets/world.svg"), "utf8");


---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mapContainer = document.querySelector(".map-container");
    const overlay = document.querySelector(".continent-overlay");
    const closeBtnSelector = ".close-overlay-button";
    const isTouchableDevice =
      "ontouchstart" in window || navigator.maxTouchPoints > 0;

    const continents = [
      "europe",
      "asia",
      "africa",
      "north-america",
      "south-america",
      "oceania",
    ];

    if (!isTouchableDevice) {
      // Desktop hover logic
      const continentsInfoArr = document.querySelectorAll(".continent-info");

      let currentX = 0;
      let currentY = 0;
      let targetX = 0;
      let targetY = 0;

      function animatePosition() {
        const activeInfo = document.querySelector(
          ".continent-info.active",
        ) as HTMLElement;
        if (activeInfo) {
          currentX += (targetX - currentX) * 0.15;
          currentY += (targetY - currentY) * 0.15;
          activeInfo.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;
        }
        requestAnimationFrame(animatePosition);
      }
      animatePosition();

      document.addEventListener("mousemove", (e) => {
        const activeInfo = document.querySelector(
          ".continent-info.active",
        ) as HTMLElement;
        if (activeInfo) {
          const cursorDistance = 15;
          let left = e.clientX + cursorDistance;
          let top = e.clientY + cursorDistance;

          if (left + 408 > window.innerWidth) {
            left = e.clientX - 428;
          }

          if (top + activeInfo.offsetHeight > window.innerHeight) {
            top = e.clientY - activeInfo.offsetHeight - cursorDistance;
          }

          targetX = left;
          targetY = top;
        }
      });

      if (mapContainer) {
        continents.forEach((continent) => {
          const group = mapContainer.querySelector(`g.${continent}`);
          const continentInfoPopup = document.querySelector(
            `.continent-info[data-continent="${continent}"]`,
          ) as HTMLElement;

          if (group && continentInfoPopup) {
            group.addEventListener("mouseenter", () => {
              continentsInfoArr.forEach((info) => {
                (info as HTMLElement).style.opacity = "0";
                info.classList.remove("active");
              });

              continentInfoPopup.style.opacity = "1";
              continentInfoPopup.style.pointerEvents = "none";
              continentInfoPopup.classList.add("active");

              const rect = group.getBoundingClientRect();
              currentX = rect.left;
              currentY = rect.top;
              targetX = currentX;
              targetY = currentY;
            });

            group.addEventListener("mouseleave", () => {
              continentInfoPopup.style.opacity = "0";
              continentInfoPopup.classList.remove("active");
            });
          }
        });
      }
    } else {
      // Mobile logic: tap to show full overlay
      if (mapContainer) {
        continents.forEach((continent) => {
          const group = mapContainer.querySelector(`g.${continent}`);
          if (group) {
            group.addEventListener("click", () => {
              // Find the corresponding .continent-overlay-data
              const overlayData = document.querySelector(
                `.continent-overlay-data[data-continent="${continent}"]`,
              );

              if (overlayData && overlay) {
                // Clear existing overlay content
                overlay.innerHTML = "";
                // Clone the overlay data content into the overlay
                const clone = overlayData.cloneNode(true) as HTMLElement;
                clone.style.display = ""; // make sure it's visible
                overlay.appendChild(clone);

                // Clone the <g> of the continent into the overlay's SVG
                const overlayMapSvg = overlay.querySelector(
                  ".continent-overlay-map",
                );
                
                const originalContinentG = mapContainer.querySelector(
                  `g.${continent}`,
                );
                if (originalContinentG && overlayMapSvg) {
                  overlayMapSvg.classList.add("world-map");
                  const clonedG = originalContinentG.cloneNode(true);
                  overlayMapSvg.appendChild(clonedG);

                  requestAnimationFrame(() => {
                    const bbox = (clonedG as SVGGraphicsElement).getBBox();
                    overlayMapSvg.setAttribute(
                      "viewBox",
                      `${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}`,
                    );
                  });
                }

                overlay.classList.add("active");

                // Add close button functionality
                const closeBtn = overlay.querySelector(closeBtnSelector);
                if (closeBtn) {
                  closeBtn.addEventListener("click", () => {
                    overlay.classList.remove("active");
                  });
                }
              }
            });
          }
        });
      }
    }
  });
</script>

<div class="relative">
  <!-- <div class="map-container" set:html={worldSVG}></div> -->
  <div class="map-container" set:html={rawSVG}>
  </div>

  {
    // Generate both .continent-info (for desktop hover) and .continent-overlay-data (for mobile)
    continentInfoElements.map(({ id, name, countriesCount, countriesList }) => (
      <>
        {/* Desktop hover info */}
        <article class="continent-info" data-continent={id}>
          <header>
            <h3>
              <span class="continent-name">{name}</span>
              <span class="countries-number">
                ({countriesCount} {countriesCount === 1 ? "país" : "països"})
              </span>
            </h3>
            <Image src={handballBall} alt="" />
          </header>
          <p>{countriesList}</p>
        </article>

        {/* Hidden overlay data for mobile */}
        <div
          class="continent-overlay-data"
          data-continent={id}
          style="display:none;"
        >
          <header>
            <h3>
              <span class="continent-name">{name}</span>
              <span class="countries-number">
                ({countriesCount} {countriesCount === 1 ? "país" : "països"})
              </span>
            </h3>
            <button class="close-overlay-button">X</button>
          </header>

          <div class="continent-overlay-map-wrapper">
            <svg
              class="continent-overlay-map"
              preserveAspectRatio="xMidYMid meet"
            />
            <p>{countriesList}</p>
          </div>
        </div>
      </>
    ))
  }

  <div class="continent-overlay"></div>
</div>

<style>
  div.map-container {
    width: 100vw;
    max-width: 1513px;
    padding-inline: var(--space-x-m);
    margin-inline: auto;
    position: relative;
    overflow: visible;
  }

  .relative {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .continent-info {
    position: fixed;
    width: 408px;
    color: var(--clr-primary);
    border: 1px solid var(--clr-primary);
    border-radius: 0.8rem;
    font-weight: var(--fnt-wg-regular);
    background-color: white;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s ease-out;
    pointer-events: none;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    left: 0;
    top: 0;
    transform: translate3d(0, 0, 0);
    will-change: transform;
  }

  .continent-info header {
    background-color: var(--clr-accent);
    padding-inline: 1.5rem;
    padding-block: 1rem;
    border-top-left-radius: 0.8rem;
    border-top-right-radius: 0.8rem;
    border-bottom: 1px solid var(--clr-primary);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .countries-number {
    font-size: var(--fnt-sz-sm);
  }

  .continent-info p {
    padding: 1.5rem;
  }

  :global(.world-map path) {
    fill: rgba(197, 220, 255, 1);
    stroke: white;
    stroke-width: 0.5;
  }

  /* Highlight countries on hover (desktop) */
  @media (hover: hover) {
    :global(.map-container:has(g.europe:hover) path.europe.highlighted),
    :global(.map-container:has(g.asia:hover) path.asia.highlighted),
    :global(.map-container:has(g.africa:hover) path.africa.highlighted),
    :global(
        .map-container:has(g.north-america:hover) path.north-america.highlighted
      ),
    :global(
        .map-container:has(g.south-america:hover) path.south-america.highlighted
      ),
    :global(.map-container:has(g.oceania:hover) path.oceania.highlighted) {
      fill: var(--clr-primary);
    }
  }

  /* Fullscreen overlay for mobile */
  .continent-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    color: var(--clr-primary);
    display: flex;
    flex-direction: column;
    padding: 1rem;
    box-sizing: border-box;
    z-index: 1000;
    opacity: 0;
    pointer-events: none;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .continent-overlay-data {
    background-color: var(--clr-secondary);
    color: var(--clr-primary);
    border: 1px solid var(--clr-primary);
    border-radius: 0.8rem;
    font-weight: var(--fnt-wg-regular);
    max-width: 408px;
  }

  .continent-overlay.active {
    opacity: 1;
    pointer-events: all;
  }

  .continent-overlay header {
    background-color: var(--clr-accent);
    padding-inline: 1.5rem;
    padding-block: 1rem;
    border-top-left-radius: 0.8rem;
    border-top-right-radius: 0.8rem;
    border-bottom: 1px solid var(--clr-primary);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .close-overlay-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
  }

  .continent-overlay-map-wrapper {
    padding-inline: 1.5rem;
    padding-block: 1rem;
  }

  .continent-overlay-map {
    width: 100%;
    height: auto;
    max-height: 162px;
  }

  :global(.continent-overlay-map:has(g.europe) path.europe.highlighted),
  :global(.continent-overlay-map:has(g.asia) path.asia.highlighted),
  :global(.continent-overlay-map:has(g.africa) path.africa.highlighted),
  :global(
      .continent-overlay-map:has(g.north-america) path.north-america.highlighted
    ),
  :global(
      .continent-overlay-map:has(g.south-america) path.south-america.highlighted
    ),
  :global(.continent-overlay-map:has(g.oceania) path.oceania.highlighted) {
    fill: var(--clr-primary);
  }
</style>
