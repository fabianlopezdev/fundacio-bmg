---
import { Image } from "astro:assets";
import yellowArrow from "@assets/yellow-arrow.png";
import heroImage from "@assets/equip-femeni-balonmano-granollers.webp";
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Disable scroll restoration
    if ("scrollRestoration" in history) {
      history.scrollRestoration = "manual";
    }

    // Scroll to top of the page
    window.scrollTo(0, 0);

    const heroSection = document.getElementById("hero-section");
    const animationDuration = 2500; // Total animation duration in ms

    // Disable scrolling
    function disableScroll() {
      document.body.style.overflow = "hidden";
      document.documentElement.style.overflow = "hidden";
    }

    // Re-enable scrolling
    function enableScroll() {
      document.body.style.overflow = "";
      document.documentElement.style.overflow = "";
    }

    // Disable scroll immediately
    disableScroll();

    // Re-enable scroll after animation completes
    setTimeout(enableScroll, animationDuration);

    const heroArrow = document.querySelector(".hero-arrow");

    heroArrow?.addEventListener("click", (e) => {
      e.preventDefault();
      const infoSection = document.querySelector("#info");

      if (infoSection) {
        // Calculate the scroll threshold (height of hero section)
        const heroSectionHeight = heroSection?.offsetHeight;

        // Scroll to the target section, starting from below the hero section
        window.scrollTo({
          top: heroSectionHeight,
          behavior: "smooth",
        });
      }
    });

    function isMobile() {
      return /Mobi|Android|iPhone/i.test(navigator.userAgent);
    }

    const isChrome = navigator.userAgent.indexOf("Chrome") > -1;
  function animateHeight(
      element: Element | HTMLElement,
      duration: number = 600,
    ): Animation | undefined {
      // Explicitly cast to HTMLElement
      const htmlElement = element as HTMLElement;
      if (isChrome && !isMobile()) return;
      console.log("jiopioiiiioooyayaay");
      console.log("isChrome", isChrome);
      console.log("istouch", !isMobile());

      // Null and type checks
      if (!htmlElement || !(htmlElement instanceof HTMLElement)) {
        console.error("Invalid element passed to animateHeight");
        return undefined;
      }

      // Get the delay from the CSS custom property
      const computedStyle = window.getComputedStyle(htmlElement);
      const delay = computedStyle.getPropertyValue("--delay")
        ? parseInt(computedStyle.getPropertyValue("--delay"))
        : 0;

      console.log("Animate height function called", `Delay: ${delay}ms`);

      // Prevent multiple simultaneous animations
      if (htmlElement.classList.contains("animating")) return undefined;

      // Get the current and natural height
      const startHeight = htmlElement.offsetHeight;
      htmlElement.style.height = `${startHeight}px`;
      htmlElement.style.overflow = "hidden";
      htmlElement.classList.add("animating");

      // Measure the natural height
      htmlElement.style.height = "auto";
      const endHeight = htmlElement.offsetHeight;

      // Reset to start height immediately
      htmlElement.style.height = `${startHeight}px`;

      // Animate using Web Animations API (most cross-browser compatible)
      const animation = htmlElement.animate(
        [{ height: `${startHeight}px` }, { height: `${endHeight}px` }],
        {
          duration: duration,
          delay: delay, // Add the delay from CSS
          easing: "ease-in-out",
          fill: "forwards",
        },
      );

      animation.onfinish = () => {
        htmlElement.style.height = "auto";
        htmlElement.style.overflow = "";
        htmlElement.classList.remove("animating");
      };

      return animation;
    };

    // Select hero text and trigger animation
    const heroText = document.querySelector(".hero-text");
    if (heroText) {
      console.log("Hero text found");

      // Trigger animation after a short delay to ensure other animations complete
      setTimeout(() => {
        animateHeight(heroText);
      }, 2500); // Match the animationDuration from your existing code
    } else {
      console.error("Hero text not found");
    }
  });
</script>

<section id="hero-section">
  <div class="hero-text">
    <h1>
      <span class="accent animated text" style="--delay: 100ms">25 anys</span
      ><br /><span class="animated text" style="--delay: 900ms"
        >defensant els colors</span
      ><br /><span class="animated text" style="--delay: 1700ms"
        >que estimem.</span
      >
    </h1>
    <a href="#info" class="hero-arrow animated" style="--delay: 3100ms">
      <Image src={yellowArrow} alt="" loading="eager" />
    </a>
  </div>
  <Image class="hero-image" src={heroImage} alt="" />
</section>

<style>
  section {
    /* z-index: 9999; */
  }
  .hero-text {
    height: 100dvh;
    width: 100%;
    padding-block: clamp(4rem, 5.7143rem + 1.4286vi, 4.5rem);
    padding-inline: var(--space-x-xl);
    display: flex;
    justify-content: space-between;
    align-items: center;
    animation: all-height 0.6s 2500ms ease-in-out forwards;
    background-color: var(--clr-primary);
    margin-top: -5.875rem;
    /* interpolate-size: allow-keywords; */
    /* position: fixed; */
    /* z-index: 9999; */

    /* position: absolute; */
  }
  .hero-image {
    width: 100%;
    height: auto;
    object-fit: cover;
    aspect-ratio: 1512 / 751;
    /* opacity: 0; */

    /* animation: fade-in-img 1s 2500ms ease-in-out forwards; */
  }

  h1 {
    font-size: var(--fnt-sz-xxl);
    font-weight: var(--fnt-wg-light);
    letter-spacing: -0.04em;
    line-height: 1em;
    position: relative;
  }

  .hero-arrow {
    align-self: flex-end;
    display: flex;
    align-items: flex-end;
    padding-bottom: 0.38em;
    opacity: 0;
    transition: transform 0.2s ease-in-out;
    transform: translateY(0);
  }

  .hero-arrow:hover {
    transform: translateY(10%) !important;
  }
  .accent {
    color: var(--clr-accent);
    font-weight: var(--fnt-wg-bold);
  }

  span {
    display: inline-block;
    text-align: start;
  }
  .text {
    opacity: 0;
  }
  .text.animated {
    animation: animate-lines 0.2s var(--delay, 0ms)
      cubic-bezier(0, 0, 0.58, 1.2) forwards;
  }

  .hero-arrow.animated {
    animation: animate-arrow 0.6s var(--delay, 0ms) cubic-bezier(0.8, 0, 0.2, 1)
      forwards;
  }
  @media (width < 800px) {
    .hero-text {
      padding-block: clamp(2rem, 1.6667rem + 1.6667vi, 3.75rem);
      margin-top: - 4.099375rem;
    }
  }

  @keyframes animate-lines {
    0% {
      opacity: 0;
      transform: translateY(50%);
    }
    1% {
      opacity: 1;
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes animate-arrow {
    0% {
      opacity: 0;
      transform: translateY(-50%);
    }
    50% {
      opacity: 1;
      transform: translateY(10%);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-in-img {
    0% {
      opacity: 0;
      transform: translateY(110%);
    }
    100% {
      opacity: 1;
      /* transform: translateY(100%); */
    }
  }

  @keyframes all-height {
    100% {
      margin-top: 0rem;
      height: auto;
      height: calc-size(auto);
      /* position: relative; */
      /* z-index: -2; */
    }
  }
</style>
